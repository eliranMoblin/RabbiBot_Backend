@page "/Edit/{Id}"
@implements IDisposable
@using System.Drawing
@using Common
@using Entity
@using RabbiBot_Backend.Data
@inject IJSRuntime JsRuntime


@inject ImagesService ImagesService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<div class="row">
    <div class="col-md-4">
        <form>
            @*<div class="form-group">
                <label for="Name" class="control-label">Name</label>
                <input for="Name" class="form-control" @bind-value="@imageEntity.Id" />
                <input type="hidden" @bind-value="@imageEntity.Url" />
            </div>*@

            <div class="form-group">
                <label for="Color" class="control-label">Image</label>
                @*<input for="Color" class="form-control" @bind-value="@imageEntity.Url" />*@
                <img id="webcam" src="@imageEntity.Url" crossorigin="anonymous" class="img-thumbnail" />
                <canvas id="canvas" width="640" height="480"></canvas>
                <div class="ui">

                    <div class="controls" style="display: none">

                        <p>Click on the webcam feed to pick a color, then adjust tolerance.</p>

                        <div>
                            <label for="tolerance">Tolerance:</label>
                            <input id="tolerance" type="range" value="50" max="255" min="0" step="1">
                        </div>

                    </div>

                    <div id="color"></div>

                </div>
            </div>

            <div class="form-group">
                <p>Current count: @colors.Count</p>


            </div>
            <div class="form-group">
                @*<button type="button" class="btn btn-primary" @onclick="() => UpdateArticle()">Save</button>*@
                <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
            </div>

            @*<p>@colorResult.GetBrightness() GetBrightness </p>
            <p>@colorResult.GetHue() GetHue </p>
            <p>@colorResult.GetSaturation() GetSaturation </p>
            <p>@colorResult.R R</p>
            <p>@colorResult.B B</p>
            <p>@colorResult.G G</p>*@
        </form>
    </div>
</div>
<div class="row">
    <div class="col">
        <table class="table table-bordered table-hover" id="My_table">
            <thead>
                <tr>
                    <th>Color</th>
                    <th>Hue</th>
                    <th>Saturation</th>
                    <th>Value</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var grp in prodQuery)
            {

                if (HSVColor.GetHSV(grp.Key).Hue < 330 || HSVColor.GetHSV(grp.Key).Hue > 20 && HSVColor.GetHSV(grp.Key).Saturation > 30)
                {
                <tr>
                    <td style="background-color: rgb(@grp.Key.R, @grp.Key.B, @grp.Key.G)"></td>
                    <td>@Convert.ToInt32(HSVColor.GetHSV(grp.Key).Hue)</td>
                    <td>@Convert.ToInt32(@HSVColor.GetHSV(grp.Key).Saturation)</td>
                    <td>@Convert.ToInt32(@HSVColor.GetHSV(grp.Key).Value)</td>
                 
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="@(async ()=> UpdateArticle(grp.Key, (int) Status.Clean))">Primary</button>
                        <button type="button" class="btn btn-light"  @onclick="@(async ()=> UpdateArticle(grp.Key, (int) Status.NotKnow))">Light</button>
                        <button type="button" class="btn btn-danger" @onclick="@(async ()=> UpdateArticle(grp.Key, (int) Status.Dirty))">Danger</button>
                    </td>
                </tr>

                }


            }
            </tbody>
        </table>
    </div>
    
</div>


@code  {





    [Parameter]
    public string ID { get; set; }

    Images imageEntity = new Images();
    List<Color> colors = new List<Color>();
    Dictionary<Color, int> prodQuery = new Dictionary<Color, int>();

    Color colorResult = new Color();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("addDatePicker");
        await JsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#My_table");
    }

    void IDisposable.Dispose()
    {
        JsRuntime.InvokeAsync<object>("TestDataTablesRemove", "#My_table");
    }



    protected override async Task OnInitializedAsync()
    {
        imageEntity = await ImagesService.GetById(Guid.Parse(ID));
        CountImageColors(imageEntity.Url);
    }

    protected async Task UpdateArticle(Color color,int status)
    {
        await ImagesService.Update(color, status);
        navigationManager.NavigateTo("/fetchdata");
    }

    void cancel()
    {
        navigationManager.NavigateTo("/fetchdata");
    }

    private int CountImageColors(string fileName)
    {
        System.Net.WebRequest request =
            System.Net.WebRequest.Create(fileName);
        System.Net.WebResponse response = request.GetResponse();
        System.IO.Stream responseStream =
            response.GetResponseStream();

        Bitmap bmp = new Bitmap(responseStream);
        colorResult = getDominantColor(bmp);


        for (int x = 0; x < bmp.Width; x++)
        {
            for (int y = 0; y < bmp.Height; y++)
            {
                colors.Add(bmp.GetPixel(x, y));
                //Color pxl = bmp.GetPixel(x, y);
                //Color redPxl = Color.FromArgb(pxl.R, 0, 0);

                //redBmp.SetPixel(x, y, redPxl);
            }
        }


        var groups = colors.GroupBy(s => s).Select(
            s => new { Color = s.Key, Count = s.Count() });

        prodQuery = groups.ToDictionary(g => g.Color, g => g.Count);


        //prodQuery =
        //   from prod in colors
        //   group prod by prod.R into grouping
        //   select grouping;

        var result = from color in colors
                     group color by color.R
            into colorGroup
                     select new
                     {
                         R = colorGroup.Key,
                         Count = colorGroup.Count()
                     };

        //var  results = colors
        //      .GroupBy(n => n.R)
        //      .Select(n => new
        //      {
        //          MetricName = n.Key,
        //          MetricCount = n.Count()
        //      }
        //      )
        //      .OrderBy(n => n.MetricName);

        //results = colors.GroupBy(x => x)
        //    .ToDictionary(g => g.Key, g => g.Count());
        //results = colors.GroupBy(s => s).Select(g => new { Color = g.Key, Count = g.Count() });

        //int x = 0;
        //for ( x < bmp.Size.Width; x++)
        //{
        //    for (int y = 0; y > bmp.Size.Height; y++)
        //    {

        //        try
        //        {

        //        }
        //        catch (Exception)
        //        {
        //        }
        //    }
        //}
        return colors.Count;
    }


    public static Color getDominantColor(Bitmap bmp)
    {
        //Used for tally
        int r = 0;
        int g = 0;
        int b = 0;

        int total = 0;

        for (int x = 0; x < bmp.Width; x++)
        {
            for (int y = 0; y < bmp.Height; y++)
            {
                Color clr = bmp.GetPixel(x, y);
                r += clr.R;
                g += clr.G;
                b += clr.B;
                total++;
            }
        }

        //Calculate average
        r /= total;
        g /= total;
        b /= total;

        return Color.FromArgb(r, g, b);
    }

}
