@page "/Edit/{Id}"
@implements IDisposable
@using System.Drawing
@using System.IO
@using Common
@using System.Net
@using Entity
@using RabbiBot_Backend.Data
@using Server.Models
@using Images = Entity.Images
@inject IJSRuntime JsRuntime
@inject ImagesService ImagesService
@inject ColorsService ColorsService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (imageResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <form>
                <div class="form-group">
                    <label for="Color" class="control-label">Image</label>
                    <img id="webcam" src="@imageEntity.Url" crossorigin="anonymous" class="img-thumbnail" />
                    <canvas id="canvas" width="640" height="480"></canvas>
                    <div class="ui">
                        <div class="controls" style="display: none">
                            <p>Click on the webcam feed to pick a color, then adjust tolerance.</p>
                            <div>
                                <label for="tolerance">Tolerance:</label>
                                <input id="tolerance" type="range" value="50" max="255" min="0" step="1">
                            </div>
                        </div>
                        <div id="color"></div>
                    </div>
                </div>
             
            </form>
        </div>
    </div>
    <div class="row">
        <div class="col">


            <div class="card">
                <div class="card-body">
                    <table class="table table-bordered table-hover table-responsive" id="My_table2">
                        <thead>
                            <tr>
                                <th>Color</th>
                                <th>Hue</th>
                                <th>Saturation</th>
                                <th>Value</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in colorsViewModelList)
                            {
                                if (item.Hue < 330 || item.Hue > 20 && item.Saturation > 30)
                                {
                                    var id = $"{item.Hue}-{item.Saturation}-{item.Value}";
                                    <tr id="@id">
                                        <td style="background-color: rgb(@item.R,@item.G,@item.B)"></td>
                                        <td>@item.Hue</td>
                                        <td>@item.Saturation</td>
                                        <td>@item.Value</td>
                                        <td>
                                            <button type="button" class="btn btn-primary" @onclick="@(async ()=> UpdateArticle(item, (int) Status.Clean,id))">Primary</button>
                                            <button type="button" class="btn btn-light" @onclick="@(async ()=> UpdateArticle(item, (int) Status.NotKnow,id))">Light</button>
                                            <button type="button" class="btn btn-danger" @onclick="@(async ()=> UpdateArticle(item, (int) Status.Dirty,id))">Danger</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}



@code  {




    int hue;
    int saturation;
    int value;

    protected async Task ConvertColor(Color color)
    {
        hue = Convert.ToInt32(HSVColor.GetHSV(color).Hue);
        saturation = Convert.ToInt32(HSVColor.GetHSV(color).Saturation);
        value = Convert.ToInt32(HSVColor.GetHSV(color).Value);
    }


    [Parameter]
    public string ID { get; set; }

    Images imageEntity = new Images();

    ImageResult imageResult;
    List<ColorViewModel> colorsViewModelList = new List<ColorViewModel>();

    protected override async Task OnInitializedAsync()
    {
        Task.Delay(2000);
        imageResult = await ColorsService.GetImageColor(Guid.Parse(ID));
        imageEntity = imageResult.Images;
        colorsViewModelList = imageResult.ColorViewModels;


    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //colorsList = await ColorsService.Get();
            if (imageResult != null)
            {
                await JsRuntime.InvokeVoidAsync("addDatePicker");
            }
        }

        Task.Delay(2000);
        await JsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#My_table2");
        //
    }

    void IDisposable.Dispose()
    {
        JsRuntime.InvokeAsync<object>("TestDataTablesRemove", "#My_table2");
    }


    protected async Task UpdateArticle(ColorViewModel color, int status, string id)
    {
        await ColorsService.Update(color, status);
        await JsRuntime.InvokeAsync<object>("HiedRow", id);
    }

    void cancel()
    {
        navigationManager.NavigateTo("/fetchdata");
    }

    //private async Task<int> CountImageColors(string fileName)
    //{

    //    var request = WebRequest.Create(fileName);
    //    var response = request.GetResponse();
    //    var responseStream = response.GetResponseStream();
    //    Bitmap bmp = new Bitmap(responseStream);


    //    for (int x = 0; x < bmp.Width; x++)
    //    {
    //        for (int y = 0; y < bmp.Height; y++)
    //        {
    /////colors.Add(bmp.GetPixel(x, y));
    //            var color = bmp.GetPixel(x, y);
    //            ColorViewModel model = new ColorViewModel
    //            {
    //                Hue = Convert.ToInt32(HSVColor.GetHSV(color).Hue),
    //                Saturation = Convert.ToInt32(HSVColor.GetHSV(color).Saturation),
    //                Value = Convert.ToInt32(HSVColor.GetHSV(color).Value),
    //                RBG = $"{color.R},{color.B},{color.G}"

    //            };

    ////var alreadyExist=  colorsViewModelList.Contains(model);'
    //            var reuslt = colorsViewModelList.SingleOrDefault(x => x.Hue == model.Hue && x.Saturation == model.Saturation && x.Value == model.Value);
    //            if (reuslt==null)
    //            {

    //                var ccc = colorsList;
    //                var xx = colorsList.SingleOrDefault(x => x.Hue == model.Hue && x.Saturation == model.Saturation && x.Value == model.Value);
    //                if (xx==null)
    //                {
    //                    colorsViewModelList.Add(model);
    //                }


    //            }

    //        }
    ////break;
    //    }

    //    return colors.Count;
    ////var groups = colorsViewModelList.GroupBy(s => s).Select(
    ////    s => new { Color = s.Key, Count = s.Count() }).ToList();


    ////var xxx = groups.Where(x => x.Count == 1).ToList();

    ////prodQuery = xxx.ToDictionary(g => g.Color, g => g.Count);


    ////prodQuery =
    ////   from prod in colors
    ////   group prod by prod.R into grouping
    ////   select grouping;

    ////var result = from color in colors
    ////             group color by color.R
    ////    into colorGroup
    ////             select new
    ////             {
    ////                 R = colorGroup.Key,
    ////                 Count = colorGroup.Count()
    ////             };

    ////var  results = colors
    ////      .GroupBy(n => n.R)
    ////      .Select(n => new
    ////      {
    ////          MetricName = n.Key,
    ////          MetricCount = n.Count()
    ////      }
    ////      )
    ////      .OrderBy(n => n.MetricName);

    ////results = colors.GroupBy(x => x)
    ////    .ToDictionary(g => g.Key, g => g.Count());
    ////results = colors.GroupBy(s => s).Select(g => new { Color = g.Key, Count = g.Count() });

    ////int x = 0;
    ////for ( x < bmp.Size.Width; x++)
    ////{
    ////    for (int y = 0; y > bmp.Size.Height; y++)
    ////    {

    ////        try
    ////        {

    ////        }
    ////        catch (Exception)
    ////        {
    ////        }
    ////    }
    ////}

    //}





}
