@page "/Edit/{Id}"
@implements IDisposable
@using System.Drawing
@using System.IO
@using Common
@using System.Net
@using Entity
@using RabbiBot_Backend.Data
@using Server.Models
@using Images = Entity.Images
@inject IJSRuntime JsRuntime
@inject ImagesService ImagesService
@inject ColorsService ColorsService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (imageResult == null)
{
    <img src="/img/LOAD.gif" class="img-fluid" />
}
else
{
    <div class="row">
        <div class="col-md-4">
            <form>
                <div class="form-group">
                    <label for="Color" class="control-label">Image</label>
                    <img id="webcam" src="@imageEntity.Url" crossorigin="anonymous" class="img-thumbnail" />
                    <canvas id="canvas" width="640" height="480"></canvas>
                    <div class="ui">
                        <div class="controls" style="display: none">
                            <p>Click on the webcam feed to pick a color, then adjust tolerance.</p>
                            <div>
                                <label for="tolerance">Tolerance:</label>
                                <input id="tolerance" type="range" value="50" max="255" min="0" step="1">
                            </div>
                        </div>
                        <div id="color"></div>
                    </div>
                </div>

            </form>
        </div>
    </div>
    <div class="row">
        <div class="col">


            <div class="card">
                <div class="card-body">
                    <table class="table table-bordered table-hover" id="My_table2">
                        <thead>
                            <tr>
                                <th>Color</th>
                                <th>Hue</th>
                                <th>Saturation</th>
                                <th>Value</th>
                                <th>ColorStatus</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in colorsViewModelList)
                            {
                                if (item.Hue < 330 || item.Hue > 20 && item.Hue < 290 && item.Saturation > 30 && item.Value > 40)
                                {
                                    if (item.Hue > 170 && item.Hue < 330)
                                    {
                                        if (item.Value > 40)
                                        {
                                            if (item.Saturation > 19)
                                            {
                                                var id = $"{item.Hue}-{item.Saturation}-{item.Value}";
                                                <tr id="@id">
                                                    <td style="background-color: rgb(@item.R,@item.G,@item.B)"></td>
                                                    <td>@item.Hue</td>
                                                    <td>@item.Saturation</td>
                                                    <td>@item.Value</td>
                                                    <td>
                                                        <button type="button" class="btn btn-primary" @onclick="@(async ()=> UpdateArticle(item, (int) ColorStatus.Clean,id))">Clean</button>
                                                        <button type="button" class="btn btn-light" @onclick="@(async ()=> UpdateArticle(item, (int) ColorStatus.NotKnow,id))">Not Know</button>
                                                        <button type="button" class="btn btn-danger" @onclick="@(async ()=> UpdateArticle(item, (int) ColorStatus.Dirty,id))">Dirty</button>
                                                    </td>
                                                </tr>

                                            }
                                        }
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}



@code  {




    int hue;
    int saturation;
    int value;

    protected async Task ConvertColor(Color color)
    {
        hue = Convert.ToInt32(HSVColor.GetHSV(color).Hue);
        saturation = Convert.ToInt32(HSVColor.GetHSV(color).Saturation);
        value = Convert.ToInt32(HSVColor.GetHSV(color).Value);
    }


    [Parameter]
    public string ID { get; set; }

    Images imageEntity = new Images();

    ImageResult imageResult;
    List<ColorViewModel> colorsViewModelList = new List<ColorViewModel>();

    protected override async Task OnInitializedAsync()
    {
        Task.Delay(2000);
        imageResult = await ColorsService.GetImageColor(Guid.Parse(ID));
        imageEntity = imageResult.Images;
        colorsViewModelList = imageResult.ColorViewModels;


    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //colorsList = await ColorsService.Get();
            if (imageResult != null)
            {
                await JsRuntime.InvokeVoidAsync("addDatePicker");
            }
        }

        Task.Delay(2000);
        await JsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#My_table2");
        //
    }

    void IDisposable.Dispose()
    {
        JsRuntime.InvokeAsync<object>("TestDataTablesRemove", "#My_table2");
    }


    protected async Task UpdateArticle(ColorViewModel color, int status, string id)
    {
        await ColorsService.Update(color, status);
        await JsRuntime.InvokeAsync<object>("HiedRow", id);
    }

    void cancel()
    {
        navigationManager.NavigateTo("/fetchdata");
    }


}
